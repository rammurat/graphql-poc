type Query {
    posts(query: String): [Post!]!,
    users(query: String): [User!]!,
    allUsers: [User!]!,
    allPosts: [Post!]!,
    allComments: [Comment!]!
}

type Mutation {
    createUser(data: AddUserInput) : User!
    createPost(data: AddPostInput) : Post!
    createComment(data: AddCommentInput) : Comment!

    deleteUser(id: ID!) : User!
    deletePost(id: ID!) : Post!
    deleteComment(id: ID!) : Comment!

    updateUser(id: ID!, data: UpdateUserInput) : User!
    updatePost(id: ID!, data: UpdatePostInput) : Post!
    updateComment(id: ID!, data: UpdateCommentInput) : Comment!
}


type Subscription {
    comment(postId: ID!): Comment!
    post: PostSubscriptionPayload!
}

type PostSubscriptionPayload {
    mutation: String!
    data: Post!
}

input AddUserInput {
    name: String!, 
    email: String!, 
    age: Int!
}

input AddPostInput {
    title: String!, 
    body: String!, 
    published: Boolean!,
    author: ID!
}

input AddCommentInput {
    text: String!, 
    author: ID!, 
    post: ID!
}

input UpdateUserInput {
    name: String, 
    email: String, 
    age: Int
}

input UpdatePostInput {
    title: String, 
    body: String, 
    published: Boolean,
    author: ID
}

input UpdateCommentInput {
    text: String, 
    author: ID, 
    post: ID
}

type Post {
    id: ID!,
    title: String!,
    body: String!,
    published: Boolean!,
    author: User!,
    comments: [Comment!]!
}

type User {
    id: ID!,
    name: String!,
    email: String!,
    age: Int!,
    articles: [Post!]!,
    comments: [Comment!]!
}

type Comment {
    id: ID!,
    text: String!,
    author: User!,
    post: Post!
}